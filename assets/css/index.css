/**
 * Lo primero sera definir algunas propiedades que se utilizaran como base del proyecto: 
 * 1. Utilizar la fuente Lato, la cual se importara desde Google Fonts.
 * 2. Se crearan variables personalizadas para definir los colores a utilizar dentro de la pagina.
 * 3. La etiqueta <body> tendrá un alto del 100% del alto del dispositivo, un margen por defecto de cero, ademas de que se evitara que los elementos
 *      se salgan de pantalla utilizando hidden.
 */
@import url('https://fonts.googleapis.com/css2?family=Lato:wght@100;300;700&display=swap');
:root {
    --yellow: #ffd602;
    --red: #d5040a;
    --blue: #036cb6;
}
body {
    height: 100vh;
    margin: 0;
    overflow: hidden;
    font-family: 'Lato', sans-serif;
}

/**
 * Se asignan las dimensiones para la etiqueta <main> con la clase "page", la cual sera del 100% de ancho y el 100 del viewport height. Se le da
        una posición relativa, para que el siguiente contenedor se posiciones sobre esta.
 * La etiqueta <section> con la clase "container" tendrá una posición absoluta y un valor positivo en el eje z-index para posicionarse Sobre la 
 *      etiqueta anterior. 
 * Utilizando el sistema de grillas de grid, se crean dos columnas con distintos anchos. Ademas dentro de la grilla, se crearan tres filas, las
 *      cuales también tendrán diferentes valores cada una.
 * Una vez que el contenedor principal fue dividido en diferentes filas y columnas, se le pueden asignar nombres a estas areas. Los nombres pueden
 *      ser cualquiera, pero se recomienda que sean explicativos de lo que tendrán dentro como contenido.
 */
.page {
    position: relative;
    height: 100vh;
    width: 100%;
}
.container {
    position: absolute;
    z-index: 1;
    display: grid;
    grid-template-columns: 55% 45%;
    grid-template-rows: 20% 50% 30%;
    grid-template-areas:    "nav     aside"
                            "section aside"
                            "footer  aside";
    height: 100%;
    width: 100%;
}

/**
 * Se le asignan estilos a la barra de navegación. Lo primero es utilizar el nombre del area que corresponde según fue definido dentro del
 *      contenedor principal.
 * Se utiliza flexbox para alinear el contenido de esta dentro del <div> con el contenido del navbar.
 * Se crea una animación utilizando keyframes la que luego se llama desde la clase donde se desea utilizar. Existen dos formas de definir la
 *      configuración de la animación, la simple donde se define todo en una sola linea, y la mas complicada donde se debe hacer todo por separado,
 *      pero con ambas opciones se llegara al mismo resultado.
 * La información que se debe definir para utilizar la animación es: 
 *      - El nombre de la animación (Debe ser el mismo del keyframes).
 *      - La demora en la ejecución en una cantidad de segundos luego de que la pagina inicia para ejecutar la animación.
 *      - La duración de la animación.
 *      - El tipo de aceleración.
 * IMPORTANTE: no es necesario que este declarada toda esta información, tampoco es necesario utilizar el mismo orden, ya que el Compilador del
 *      navegador entiende la idea y rellena las reglas que faltan con valores por defecto del navegador.
 */
.navbar {
    grid-area: nav;
    /* background: lightpink; */
    display: flex;
}
.navbar__content {
    display: flex;
    align-items: center;
    width: 100%;
    padding: 0 0 0 80px;

    animation: navbar 2.5s 1s ease-in-out;
    /* animation-name: navbar; */
    /* animation-delay: 2.5s; */
    /* animation-duration: 1s; */
    /* animation-timing-function: ease-in-out; */
}

/**
 * Se crea una animación para que la barra de navegación aparezca y se desplace de arriba hacia abajo en el eje Y.
 * En el momento cero %, la barra estará en el eje Y sobre el contenido y no sera visible ya que el valor es negativo.
 * En el momento del estado final, el 100%, volverá a la posición original.
 */
@keyframes navbar {
    0% {
        transform: translateY(-200px);
    }
    100% {
        transform: translateY(0px);
    }
}

.navbar__content img {
    width: 50px;
}
.navbar__content ul {
    display: flex;
    justify-content: space-evenly;
    list-style: none;
    padding: 0;
    width: 450px;
}
.navbar__content ul li a {
    color: var(--red);
    font-weight: 300;
    text-decoration: none;
}

/**
 * Se le asignan estilos a la sección principal. Lo primero es utilizar el nombre del area que corresponde según fue definido dentro del 
 *      contenedor principal.
 * Se utiliza flexbox para ordenar el contenido de la sección en una columna.
 * Se crea una animación utilizando keyframes, para que el contenido de la sección principal aparezca y se desplace de arriba hacia abajo en el eje Y.
 * La animación se llamara main-content, se ejecutara 3 segundos después de cargue la pagina, tendrá una duración de 0.8 segundos y su aceleración
 *      sera de tipo ease-in-out, es decir, comenzará lentamente, será más rápido en el medio de la animación y luego terminará lentamente.
 */
.main-content {
    grid-area: section;
    display: flex;
    flex-direction: column;
    justify-content: center;
    padding-left: 80px;

    animation: main-content 3s 0.8s ease-in-out;
}
@keyframes main-content {
    0% {
        transform: translateY(-600px);
    }
    100% {
        transform: translateY(0px);
    }
}

/**
 * Se asignan estilos a etiquetas a partir de pseudo-clases.
 * La primera etiqueta <p> que sea hija de la clase "main-content" tendrá una fuente de 36 pixeles y un margen de cero desde arriba y derecha,
 *      de -14 px desde abajo y de 44px desde izquierda.
 * La ultima etiqueta <p> que sea hija de la clase "main-content" tendrá una fuente mas delgada y un ancho acotado.
 */
.main-content p:first-child {
    font-size: 36px;
    font-weight: 300;
    margin: 0 0 -14px 44px;
}
.main-content p:last-child {
    font-weight: 100;
    margin: 0;
    width: 60%;
}
.main-content h1 {
    font-size: 48px;
    font-weight: 700;
    margin: 0 0 28px 0;
}

/**
 * Se le asignan estilos a la sección aside. Lo primero es utilizar el nombre del area que corresponde según fue definido dentro del contenedor
 *      principal.
 * Se utiliza grid para crear una nueva grilla, esta vez de 6 columnas, las cuales tendrán el mismo ancho entre ellas, es decir, una fracción del
 *      tamaño completo.
 * Se utiliza la propiedad transform para girar el texto de "SUPERMAN" en 90 grados.
 * Ya que el texto "SUPERMAN" esta dentro de las 6 columnas de aside, se le puede asignar que posiciones ocupar: 
 *      - Que empiece en la fila 1 y que termine en la fila 2.
 *      - Que empiece en la columna 1 y que termine en la columna 2.
 * La opacidad por defecto sera de cero, ya que el texto estará oculto.
 * Se crea una animación utilizando keyframes, para que el texto "SUPERMAN" sea visible.
 * La animación se llamara side-content-text, se ejecutara 3.5 segundos después de cargue la pagina, tendrá una duración de 0.5 segundos, su aceleración
 *      sera de tipo ease-in-out y se agrega la propiedad de modo de relleno de la animación la cual sera de tipo forward lo que significa que cuando
 *      la animación termine, se quedará con los valores y estilos que se aplicaron en el último keyframe de la ejecución de la animación.
 */
.side-content {
    grid-area: aside;
    /* background: palegoldenrod; */
    display: grid;
    grid-template-columns: repeat(6, 1fr);
    align-items: center;
}
.side-content p {
    transform: rotate(-90deg);
    font-size: 36px;
    grid-row: 1 / 2;
    grid-column: 1 / 2;
    opacity: 0;

    animation-name: side-content-text;
    animation-delay: 3.5s;
    animation-duration: 0.5s;
    animation-timing-function: ease-in-out;
    animation-fill-mode: forwards;
}
@keyframes side-content-text {
    0% {
        opacity: 0;
    }
    100% {
        opacity: 1;
    }
}

/**
 * Ya que la imagen de "SUPERMAN" esta dentro de las 6 columnas de aside, se le puede asignar que posiciones ocupar: 
 *      - Que empiece en la fila 1 y que termine en la fila 2.
 *      - Que empiece en la columna 2 y que termine en la columna 6. (las columnas totales son 7)
 * Se crea una animación utilizando keyframes, para que la imagen de "SUPERMAN" se mueva de derecha a izquierda. Debe comenzar desde un valor positivo
 *      ya que estará en el eje X, bien a la derecha y debe volver a la posición cero en el mismo eje.
 * La animación se llamara side-content-img, se ejecutara 4 segundos después de cargue la pagina, tendrá una duración de 0.5 segundos, su aceleración
 *      sera de tipo ease-in-out.
 */
.side-content img {
    width: 100%;
    grid-column: 2 / 6;
    grid-row: 1 / 2;

    animation: side-content-img 4s 0.5s ease-in-out;
}
@keyframes side-content-img {
    0% {
        transform: translateX(600px);
    }
    100% {
        transform: translateX(0px);
    }
}

/**
 * Dentro de la sección aside, se agrega un <div> para dividir el contenido utilizando una columna de color.
 * El <div> ocupara los espacios desde la columna 4 hasta la columna 7 y desde la fila 1 hasta la fila 2.
 * IMPORTANTE: Para que el color se vea, siempre se le debe agregar un alto al elemento.
 */
.side-content div {
    height: 100%;
    background: var(--yellow);

    grid-column: 4 / 7;
    grid-row: 1 / 2;
}

/**
 * Se le asignan estilos a la sección footer. Lo primero es utilizar el nombre del area que corresponde según fue definido dentro del contenedor
 *      principal.
 * Se utiliza flexbox para organizar el contenido, en este caso, los elementos se alinearan de abajo hacia arriba.
 * Se crea una animación utilizando keyframes, para que el footer aparezca de abajo hacia arriba.
 * La animación se llamara footer-content, se ejecutara 4 segundos después de cargue la pagina, tendrá una duración de 0.5 segundos, su aceleración
 *      sera de tipo ease-in-out y el modo de relleno de la animación la cual sera de tipo forward.
 * IMPORTANTE: ya que la idea es que el footer no se vea hasta que cargue la animación, se debe agregar su posición inicial en el eje Y, el cual
 *      seria fuera de la pantalla (100%), este sera su valor por defecto.
 */
.footer {
    grid-area: footer;
    display: flex;
    justify-content: space-evenly;
    align-items: flex-end;
    background: var(--yellow);
    border-radius: 0 50px 0 0;

    animation-name: footer-content;
    animation-duration: 0.5s;
    animation-delay: 4s;
    animation-timing-function: ease-in-out;
    animation-fill-mode: forwards;

    transform: translateY(100%);
}
@keyframes footer-content {
    0% {
        transform: translateY(100%);
    }
    100% {
        transform: translateY(0px);
    }
}

.footer div {
    background: var(--blue);
    width: 130px;
    height: 50%;
    border-radius: 20px 20px 0 0;
    display: flex;
    justify-content: center;
}

/**
 * Se crea una animación para el momento en que el puntero del mouse se coloque sobre imagen en el footer utilizando la pseudo clase :hover.
 * La imagen se moverá desde abajo hacia arriba en el eje Y, por lo que el valor en pixeles debe ser negativo. Ademas se le agrega una escala mayor
 *      a 1 para hacer crecer la imagen. Finalmente se agrega una duración en segundos y el tipo de aceleración que se utilizara.
 * IMPORTANTE: Cuando se quita el puntero del mouse de la imagen, da la sensación de la imagen se recarga porque el cambio de tamaño es muy brusco,
 *      por lo que se debe agregar una animación para volver al tamaño y posición originales dentro de la clase original (la que no tiene el hover).
 * RECOMENDACIÓN: pensando en el diseña UX, al volver la imagen a su tamaño original se recomiendo cambiar el tiempo de la animación por uno un poco
        mayor, para crear un efecto como si la pagina estuviese descansando.
 */
.footer div img {
    width: 160px;
    position: absolute;
    bottom: 30px;

    transform: translateY(0px) scale(1);
    transition: transform 0.5s ease-in-out;
}
.footer div:hover img {
    cursor: pointer;

    transform: translateY(-20px) scale(1.1);
    transition: transform 0.3s ease-in-out;
}

/**
 * La pantalla del loader sera lo primero que cargara al entrar en la pagina y deberá ocupar el tamaño completo de la pantalla.
 * Se utiliza flexbox para alinear el contenido (los puntos de carga) en el centro.
 * Se le asigna una posición absoluta al loader ademas de un valor de z-index mayor a cualquier otro utilizado antes para que quede sobre todo el
 *      contenido de la pagina.
 * Se crea una animación utilizando keyframes, para hacer visible y luego desaparecer. Los tiempos de manipulación serán 3 momentos:
 *      - En el punto 0% la opacidad del fondo blanco sera de 1 y la visibilidad sera visible.
 *      - En el punto 95% las condiciones se mantienen iguales.
 *      - En el punto 100% casi al final, el fondo blanco desaparece, no tendrá opacidad y se ocultara.
 * La animación se llamara loader, tendrá una duración de 2 segundos, su aceleración sera de tipo lineal y el modo de relleno de la animación la
 *      cual sera de tipo forward, es decir, el loader quedara con los valores y estilos del ultimo keyframe de la animación.
 */
.loader {
    width: 100%;
    height: 100%;
    background: white;
    display: flex;
    align-items: center;
    justify-content: center;
    position: absolute;
    z-index: 3;

    animation: loader 2s linear forwards;
}
@keyframes loader {
    0% {
        opacity: 1;
        visibility: visible;
    }
    95% {
        opacity: 1;
        visibility: visible;
    }
    100% {
        opacity: 0;
        visibility: hidden;
    }
}

/**
 * Se crean los círculos que aparecerán en la pantalla de carga. Se utilizaran etiquetas <div> para crear los círculos.
 * Se les asigna un alto y ancho que sean iguales, ademas de un radio del 50% para que tengan una forma circular.
 * Se crea una animación utilizando keyframes, para agrandar y achicar los círculos aumentando y disminuyendo su escala.
 * La animación se llamara scaling, tendrá una duración de 2 segundos, su aceleración sera de tipo ease-in-out ya que asi el circulo comenzara a 
 *      crecer lentamente, luego acelerara al llegar a la mitad y al final terminara lentamente. Ademas se repetirá de forma infinita hasta que se
 *      acabe el tiempo de duración.
 * IMPORTANTE: ya que esta animación se ejecuta junto al loader, se recomienda que tengan la misma duración.
 * IMPORTANTE: se debe agregar un valor de escala que tendrán los div por defecto, ya que crecerán de pequeños a grandes, el valor de partida sera de cero.
 * Se utiliza la pseudo clase nth-child para lograr animar los círculos de uno en uno y no todos a la vez. Se le asigna a cada hijo un tiempo en
 *      segundos en el que comenzara a ejecutar la animación. Para crear el efecto, los tres tiempos deben ser distintos.
 */
.loader div {
    background: var(--yellow);
    width: 40px;
    height: 40px;
    border-radius: 50%;
    margin: 10px;

    animation: scaling 2s ease-in-out infinite;

    transform: scale(0);
}
@keyframes scaling {
    0%, 100% {
        transform: scale(0.2);
    }
    40% {
        transform: scale(1);
    }
    50% {
        transform: scale(1);
    }
}
.loader div:nth-child(1) {
    animation-delay: 0.2s;
}
.loader div:nth-child(2) {
    animation-delay: 0.4s;
}
.loader div:nth-child(3) {
    animation-delay: 0.6s;
}


/**
 * Se crean los estilos para el modal.
 * Tendrá un ancho y alto de la pantalla completa, asi como una sombra para diferenciarlo del contenido de la pagina principal.
 * Se le asigna una posición absoluta al modal, ademas de un valor de z-index de 4 para que quede sobre todo el contenido.
 * Se le asignan estilos al <div> donde estará el contenido del modal, tendrá un alto y ancho del 50% de la pagina y estará posicionado en el centro.
 * Dentro del modal, se crea un slider, el cual tendrá un alto y ancho definidos ademas de la propiedad de preserve-3d para crear el efecto de ver
 *      las cards una detrás de la otra.
 */
.modal {
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    display: grid;
    place-items: center;
    position: absolute;
    z-index: 4;
}
.modal__content {
    background: white;
    width: 50%;
    height: 50%;
    display: grid;
    place-items: center;
    border-radius: 5px;
}
.modal__content--slider {
    width: 300px;
    height: 200px;
    transform-style: preserve-3d;
}

/**
 * Se crean los estilos para las cards.
 * Cada card tendrá un ancho del 50% y el alto de un 100% de su contenedor.
 * Se utiliza grid para centrar el contenido.
 * Se agrega una transición para animar cuando aparece la card o cuando se cambia a otra card.
 * Se ajusta el tamaño de las imágenes al 100% del ancho para que no se salga del contenedor del modal.
 */
.cards {
    width: 100%;
    height: 100%;
    position: relative;
}
.card {
    width: 50%;
    height: 100%;
    background: var(--yellow);
    display: grid;
    place-items: center;
    position: absolute;
    left: 0;
    right: 0;
    margin: 0 auto;
    transition: transform 0.5s ease;
    cursor: pointer;
}
.card img {
    width: 100%;
}

/**
 * Para crear el efecto de carrusel de forma manual, las imágenes se deben montar y colocar una a cada lado.
 * Si el input #radio-1 este chequeado, el hijo (~) que este dentro del <div> cards y se llame #card-1 estará al centro.
 * Si el input #radio-2 este chequeado, el hijo (~) que este dentro del <div> cards y se llame #card-2 estará al centro.
 * Si el input #radio-3 este chequeado, el hijo (~) que este dentro del <div> cards y se llame #card-3 estará al centro.
 * Si la condición se cumple: 
 *      - Se mantiene la posición en el eje X y se aumenta la escala de la imagen que se encuentra en el centro.
 *      - Se le da una opacidad de 1.
 *      - Se utiliza z-index para posicionar la imagen del centro sobre las otras.
 */
#radio-1:checked ~ .cards #card-1,
#radio-2:checked ~ .cards #card-2,
#radio-3:checked ~ .cards #card-3 {
    transform: translateX(0) scale(1.05);
    opacity: 1;
    z-index: 1;
}

/**
 * El segundo grupo es para mover las cards hacia la derecha.
 * Si el input #radio-1 este chequeado, el hijo (~) que este dentro del <div> cards y se llame #card-2 estará a la derecha.
 * Si el input #radio-2 este chequeado, el hijo (~) que este dentro del <div> cards y se llame #card-3 estará a la derecha.
 * Si el input #radio-3 este chequeado, el hijo (~) que este dentro del <div> cards y se llame #card-1 estará a la derecha.
 * Si la condición se cumple: 
 *      - Se cambia la posición al 40% en el eje X a la derecha y se disminuye la escala de la imagen.
 *      - Se le da una opacidad de 0.5.
 *      - Se utiliza z-index para posicionar la imagen debajo de las otras.
 */
#radio-1:checked ~ .cards #card-2,
#radio-2:checked ~ .cards #card-3,
#radio-3:checked ~ .cards #card-1 {
    transform: translateX(40%) scale(0.8);
    opacity: 0.5;
    z-index: 0;
}

/**
 * El segundo grupo es para mover las cards hacia la izquierda.
 * Si el input #radio-1 este chequeado, el hijo (~) que este dentro del <div> cards y se llame #card-3 estará a la izquierda.
 * Si el input #radio-2 este chequeado, el hijo (~) que este dentro del <div> cards y se llame #card-1 estará a la izquierda.
 * Si el input #radio-3 este chequeado, el hijo (~) que este dentro del <div> cards y se llame #card-2 estará a la izquierda.
 * Si la condición se cumple: 
 *      - Se cambia la posición al -40% en el eje X a la izquierda y se disminuye la escala de la imagen.
 *      - Se le da una opacidad de 0.5.
 *      - Se utiliza z-index para posicionar la imagen debajo de las otras.
 */
#radio-1:checked ~ .cards #card-3,
#radio-2:checked ~ .cards #card-1,
#radio-3:checked ~ .cards #card-2 {
    transform: translateX(-40%) scale(0.8);
    opacity: 0.5;
    z-index: 0;
}

/**
 * Se crean dos clases especiales para ocultar y mostrar el modal, estas clases se ejecutaran utilizando código JavaScript.
 * IMPORTANTE: en algunas situaciones, al agregar y quitar clases CSS utilizando JavaScript, puede darse el caso en que no funcione el cambio de 
 *      inmediato, por lo que se recomienda utilizar la propiedad "!important" para hacer saber al compilador del navegador que esta clase es mas
 *      importante que otras. Pero no olvidar, que hay que tener cuidado con el uso de !important debido a la especificidad de los selectores CSS
 *      y ademas llenar el código con esta propiedad no es una buena practica.
 */
.hidden {
    display: none !important;
}
.visible {
    display: grid !important;
}

/**
 * DESAFÍOS.
 * Hacer que el botón de cerrar el modal se posicione a la derecha.
 * Hacer que los botones del input radio estén ocultos.
 * Agregar un botón con los estilos del Figma que diga "Lo quiero!".
 */
.modal__content--close {
    width: 100%;
    display: flex;
    justify-content: end;
    margin-right: 20px;
    cursor: pointer;
}
.modal__content--slider input {
    visibility: hidden;
}
.modal__content--button {
    width: 200px;
    background: var(--red);
    border: none;
    color: white;
    cursor: pointer;
    font-size: 20px;
    padding: 10px;
    margin-top: 30px;
    margin-bottom: 20px;
    transform: scale(1);
    transition: transform 0.5s ease-in-out;
}
.modal__content--button:hover {
    transform: scale(1.1);
    transition: transform 0.3s ease-in-out;
}