/* N4.2: Se importa la fuente Lato desde google fonts. */
@import url('https://fonts.googleapis.com/css2?family=Lato:wght@100;300;700&display=swap');

/* N4.1: Se crean variables con los colores a utilizar. */
:root {
    --yellow: #ffd602;
    --red: #d5040a;
    --blue: #036cb6;
}

body {
    height: 100vh;
    margin: 0;
    /* N3.2: evitar que los elementos se salgan de la pantalla. */
    overflow: hidden;
    font-family: 'Lato', sans-serif;

}

.page {
    /* N3.4: Se le agrega una posición relativa al contenedor de todo la pagina. */
    position: relative;
    height: 100vh;
    width: 100%;
}

.container {
    position: absolute;
    z-index: 1;

    /* N4.3: Se crean dos columnas de distinto ancho utilizando grid. */
    display: grid;
    grid-template-columns: 55% 45%;
    /* N4.4: Se crean tris filas de distinto tamaño. */
    grid-template-rows: 20% 50% 30%;
    /* N4.5: Se crean nombres para las areas en las que se dividió el container. 
    Los nombres pueden ser cualquiera, pero se recomienda que sean explicativos de lo que tendrán dentro como contenido. */
    grid-template-areas:    "nav     aside"
                            "section aside"
                            "footer  aside";
    height: 100%;
    width: 100%;
}

/* N5.1: Se comienza a crear los estilos para la barra de navegación. 
Se le debe asignar el nombre del area nav que se creo dentro del contenedor principal.
*/
.navbar {
    grid-area: nav;
    /* background: lightpink; */
    display: flex;
}
/* N5.2: Se utiliza flexbox para alinear el contenido del navbar uno al lado del otro. */
.navbar__content {
    display: flex;
    align-items: center;
    width: 100%;
    padding: 0 0 0 80px;

    /* N5.5: Se llama a la animación de la barra de navegación.
    El primer valor es cuantos segundos después se debe ejecutar, en este caso 4 segundos después, para que coincida con el termino de la animación de loader.Tendrá una duración de 1 segundo.
    Y la aceleración sera de tipo ease-in-out
    */
    animation: 4.2s navbar 1s ease-in-out;
}

/* N5.4: Se crea la animación para que la barra de navegación aparezca y se desplace de arriba hacia abajo.
En el momento cero, la barra estará en el eje Y sobre el contenido.
En el momento del estado final, volverá a la posición original.
*/
@keyframes navbar {
    0% {
        transform: translateY(-200px);
    }
    100% {
        transform: translateY(0px);
    }
}

.navbar__content img {
    width: 50px;
}
/* N5.3: Se utiliza flexbox para darle estilo a las etiquetas dentro de la lista <ul>.
Se le quita el padding que trae por defecto el navegador y se le agrega un tamaño al <div> para separar los enlaces del menu. 
*/
.navbar__content ul {
    display: flex;
    justify-content: space-evenly;
    list-style: none;
    padding: 0;
    width: 450px;
}
.navbar__content ul li a {
    color: var(--red);
    font-weight: 300;
    text-decoration: none;
}

/* N6.1: Se comienza a crear los estilos CSS de la sección principal. 
Se le asigna el nombre de area section.
Se utilizan las propiedades de flexbox para ordenar el texto en columna.
*/
.main-content {
    grid-area: section;
    display: flex;
    flex-direction: column;
    justify-content: center;
    padding-left: 80px;

    animation: 4s main-content 0.8s ease-in-out;
}
/* N6.3: Se utilizan pseudo-clases para indicar que la primera etiqueta <p> que sea hija de main-content tenga una fuente de tamaño 36 pixeles. */
.main-content p:first-child {
    font-size: 36px;
    font-weight: 300;
    margin: 0 0 -14px 44px;
}
/* N6.4: Se utilizan pseudo-clases para indicar que la ultima etiqueta <p> que sea hija de main-content tenga una fuente mas delgada. */
.main-content p:last-child {
    font-weight: 100;
    margin: 0;
    width: 60%;
}
.main-content h1 {
    font-size: 48px;
    font-weight: 700;
    margin: 0 0 28px 0;
}

/* N6.2: Se crea una animación, para que el contenido principal base desde arriba hasta abajo. */
@keyframes main-content {
    0% {
        transform: translateY(-600px);
    }
    100% {
        transform: translateY(0px);
    }
}


/* N3.1: Lo primero sera crear los estilos para el loader de la pagina que sera lo primero que vera el usuario. */
.loader {
    background: pink;
    width: 100%;
    height: 100%;
    /* N3.3: Centrar los elementos utilizando flexbox. */
    display: flex;
    align-items: center;
    justify-content: center;
    /* N3.5: Se agrega una posición absoluta al contenedor del loader ademas de un valor de z-index 3 para que al cargar la pagina este sobre el contenedor "page". */
    position: absolute;
    z-index: 3;

    /* N3.7: Se asigna la animación que cree llamada loader.
    Tendrá una duración de 4 segundos.
    Sera de tipo lineal.
    Y el contenedor quedará con los valores y estilos que le aplique el último keyframe de la ejecución de la animación. */
    animation: loader 4s linear forwards;
}

/* N3.6: Se crea un keyframe donde se definirá la animación para hacer aparecer y desaparecer el fondo de color rosa.
Los tiempos de manipulación serán 3 momentos: 
En el punto 0% la opacidad sera de 1 y la visibilidad sera visible.
En el punto 95% las condiciones se mantienen iguales.
En el punto 100% casi al final, hacemos que el circulo desaparezca, que no tenga opacidad y se oculte.
*/
@keyframes loader {
    0% {
        opacity: 1;
        visibility: visible;
    }
    95% {
        opacity: 1;
        visibility: visible;
    }
    100% {
        opacity: 0;
        visibility: hidden;
    }
}

/* N3.8: Se crean los estilos para los círculos que aparecerán en la pantalla de carga. 
Se le debe agregar un color.
Un tamaño de alto y ancho que sean iguales.
Un radio del 50% para que quede redondo.
Un margen para esperar los diferentes círculos.
*/
.loader div {
    background: white;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    margin: 10px;

    transform: scale(0);
    /* N3.10: Se asigna la animación llamada scaling.
    Tendrá una duración de 4 segundos (COMO RECOMENDACIÓN: que la duración sea la misma que la utilizada en el loader).
    Sera de tipo ease-in-out es decir, comenzará lentamente, será más rápido en el medio de la animación y luego terminará lentamente.
    Y la animación se repetirá de forma infinita hasta que se acabe el tiempo de duración. 
    */
    animation: scaling 4s ease-in-out infinite;
}

/* N3.11: Para animar uno a uno los círculos en vez de todos a la vez, se utiliza la propiedad nth-child para asignarle a cada hijo un tiempo en segundos en el que se debe ejecutar la animación. 
Si no se hace de este modo, todos los círculos se animan al mismo tiempo. 
*/
.loader div:nth-child(1) {
    animation-delay: 0.2s;
}
.loader div:nth-child(2) {
    animation-delay: 0.4s;
}
.loader div:nth-child(3) {
    animation-delay: 0.6s;
}

/* N3.9: Se crea la animación para agrandar y achicar los círculos aumentando y disminuyendo la escala. */
@keyframes scaling {
    0%, 100% {
        transform: scale(0.2);
    }
    40% {
        transform: scale(1);
    }
    50% {
        transform: scale(1);
    }
}

/*** Ejemplo de animación hecho por un compañero. ***/
@keyframes scaling2 {
    0%, 100% {
        transform: scale(1);
    }
    50% {
        transform: scale(.2);
    }
}